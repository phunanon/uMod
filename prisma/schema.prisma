generator client {
  provider = "prisma-client-js"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./db.db"
}

model PermaRole {
  id     Int    @id @default(autoincrement())
  userSf BigInt
  roleSf BigInt

  @@unique([userSf, roleSf])
}

model ChannelBan {
  id        Int    @id @default(autoincrement())
  channelSf BigInt
  userSf    BigInt

  @@unique([channelSf, userSf])
}

model GuildMirror {
  id        Int    @id @default(autoincrement())
  guildSf   BigInt
  channelSf BigInt

  @@unique([guildSf, channelSf])
}

model Member {
  id          Int      @id @default(autoincrement())
  guildSf     BigInt
  userSf      BigInt
  tag         String
  confessMute Boolean  @default(false)
  gifMute     Boolean  @default(false)
  pingProtect Boolean  @default(false)
  numMessages Int      @default(0)
  numIqLines  Int      @default(0)
  numIqWords  Int      @default(0)
  earliest    DateTime @default(now())
  latest      BigInt   @default(0)
  present     Boolean  @default(true)

  @@unique([userSf, guildSf])
}

model StickyMessage {
  id             Int      @id @default(autoincrement())
  renewAt        DateTime
  sf             BigInt
  guildSf        BigInt
  channelSf      BigInt
  content        String
  renewalSeconds Int

  @@unique([sf, guildSf, channelSf])
}

model RoleList {
  id        Int    @id @default(autoincrement())
  guildSf   BigInt
  channelSf BigInt
  messageSf BigInt
  roleSf    BigInt
}

model GlobalChat {
  id        Int    @id @default(autoincrement())
  room      String @default("General")
  channelSf BigInt @unique
}

model GlobalChatMute {
  id        Int    @id @default(autoincrement())
  channelSf BigInt
  userSf    BigInt

  @@unique([channelSf, userSf])
}

model ActivitySort {
  id         Int    @id @default(autoincrement())
  guildSf    BigInt
  categorySf BigInt

  @@unique([guildSf, categorySf])
}

model Alert {
  id            Int       @id @default(autoincrement())
  guildSf       BigInt
  channelSf     BigInt
  insitu        Boolean   @default(false)
  event         String
  userSf        BigInt?
  roleSf        BigInt?
  pattern       String?
  altReason     String?
  cooldownSec   Int?
  cooldownUntil DateTime?
  autoDeleteSec Int?
}

model Note {
  id       Int      @id @default(autoincrement())
  guildSf  BigInt
  userSf   BigInt
  authorSf BigInt
  notedAt  DateTime @default(now())
  content  String
}

model Censor {
  id       Int     @id @default(autoincrement())
  guildSf  BigInt
  word     String
  censored String
  ban      Boolean @default(false)
}

model ChannelFlags {
  id             Int      @id @default(autoincrement())
  channelSf      BigInt   @unique
  activityAt     DateTime @default(now())
  unmoderated    Boolean  @default(false)
  blockGifs      Boolean  @default(false)
  censor         Boolean  @default(true)
  antiSpam       Boolean  @default(true)
  confessMessage BigInt?
  confessRules   String?
  aiModeration   Boolean  @default(false)
  autoHere       Boolean  @default(false)
}

model PingProtectWarns {
  id      Int    @id @default(autoincrement())
  userSf  BigInt
  aboutSf BigInt
  count   Int    @default(1)

  @@unique([userSf, aboutSf])
}

model GuildPermission {
  id         Int    @id @default(autoincrement())
  guildSf    BigInt
  roleSf     BigInt
  permission String

  @@unique([guildSf, roleSf, permission])
}

model Histogram {
  id      Int      @id @default(autoincrement())
  since   DateTime @default(now())
  sf      BigInt
  weekDay Int
  dayHour Int
  count   Int

  @@unique([sf, weekDay, dayHour])
}

model TempRole {
  id      Int      @id @default(autoincrement())
  userSf  BigInt
  guildSf BigInt
  roleSf  BigInt
  expires DateTime

  @@unique([userSf, guildSf, roleSf])
}

model Acquaintance {
  id      Int      @id @default(autoincrement())
  since   DateTime @default(now())
  guildSf BigInt
  userASf BigInt
  userBSf BigInt
  count   Int

  @@unique([guildSf, userASf, userBSf])
}

model BumpReminder {
  id            Int                @id @default(autoincrement())
  guildSf       BigInt             @unique
  channelSf     BigInt
  softChannelSf BigInt?
  remindAt      DateTime
  softRemindAt  DateTime
  Users         BumpReminderUser[]
}

model BumpReminderUser {
  id             Int          @id @default(autoincrement())
  userSf         BigInt
  bumpReminderId Int
  BumpReminder   BumpReminder @relation(fields: [bumpReminderId], references: [id], onDelete: Cascade)
}

model DisallowRole {
  id     Int    @id @default(autoincrement())
  userSf BigInt
  roleSf BigInt

  @@unique([userSf, roleSf])
}

model AutoRole {
  id       Int    @id @default(autoincrement())
  guildSf  BigInt
  roleSf   BigInt
  everyNth Int?

  @@unique([guildSf, roleSf])
}

model GuildQotd {
  id             Int            @id @default(autoincrement())
  guildSf        BigInt         @unique
  postChannelSf  BigInt
  auditChannelSf BigInt
  Question       QotdQuestion[]
}

model QotdQuestion {
  id       Int       @id @default(autoincrement())
  guildSf  BigInt
  authorSf BigInt
  question String
  postAt   DateTime?
  postedAt DateTime?
  Config   GuildQotd @relation(fields: [guildSf], references: [guildSf])
}

model PairFrequency {
  id     Int      @id @default(autoincrement())
  at     DateTime @default(now())
  userSf BigInt
  a      String
  b      String
  count  Int      @default(1)

  @@unique([userSf, a, b])
}

model GuildRule {
  id      Int    @id @default(autoincrement())
  guildSf BigInt
  rule    String
}

model RealAuthor {
  id        Int      @id @default(autoincrement())
  at        DateTime @default(now())
  userSf    BigInt
  messageSf BigInt   @unique
}

model ChannelStat {
  id         Int      @id @default(autoincrement())
  at         DateTime @default(now())
  guildSf    BigInt
  channelSf  BigInt
  numMessage Int      @default(0)

  @@unique([guildSf, channelSf])
}

model Reminder {
  id        Int      @id @default(autoincrement())
  at        DateTime @default(now())
  guildSf   BigInt
  channelSf BigInt
  userSf    BigInt
  remindAt  DateTime
  text      String
}

model GuildLevel {
  id        Int     @id @default(autoincrement())
  guildSf   BigInt  @unique
  function  String
  channelSf BigInt?
}
